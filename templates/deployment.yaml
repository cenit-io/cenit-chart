apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cenit.fullname" . }}-deployment-backend
spec:
  replicas: {{ default 1 .Values.backendReplicas }}
  selector:
    matchLabels:
      platform: {{ template "cenit.fullname" . }}-backend
  template:
    metadata:
      labels:
        platform: {{ template "cenit.fullname" . }}-backend
    spec:
      containers:
      - name: {{ template "cenit.fullname" . }}-backend
        image: cenitgroup/cenitio:backend
        imagePullPolicy: Always
        resources:
          limits:
            memory: "1Gi"
            cpu: "1000m"
        command: ["bundle", "exec", "unicorn", "-c", "config/unicorn.rb"]
        env:
          - name: SCHEDULER_LOOKUP_INTERVAL
            value: "4"
          - name: UNICORN_WORKERS
            value: "2"
          - name: MAXIMUM_UNICORN_CONSUMERS
            value: "2"
          - name: LOOKUP_SCHEDULER_OFF
            value: "false"
          - name: LOAD_DELAYED_MESSAGES_ON_START
            value: "true"
          {{- if and .Values.services.redis.host .Values.services.redis.port .Values.services.redis.db .Values.services.redis.pwd | not }}
          - name: REDIS_HOST
            value: {{ template "cenit.fullname" . }}-redis-svc
          {{- else }}
          - name: REDIS_HOST
            value: {{ .Values.services.redis.host | toString | quote }}
          - name: REDIS_PORT
            value: {{ .Values.services.redis.port | toString | quote }}
          - name: REDIS_DB
            value: {{ .Values.services.redis.db | toString | quote }}
          - name: REDIS_PASSWORD
            value: {{ .Values.services.redis.pwd | toString | quote }}
          {{- end }}
          - name: RABBITMQ_BIGWIG_TX_URL
          {{- if .Values.services.rabbitmq }}
            value: {{ .Values.services.rabbitmq }}
          {{- else }}
            value: "amqp://cenit_test:cenit_test@{{ template "cenit.fullname" . }}-svc/vhost_cenit"
          {{- end }}
          - name: MONGODB_URI
            value: mongodb://{{ template "cenit.fullname" . }}-mongo-svc/cenit

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cenit.fullname" . }}-deployment-frontend
spec:
  replicas: {{ default 1 .Values.backendReplicas }}
  selector:
    matchLabels:
      platform: {{ template "cenit.fullname" . }}-frontend
  template:
    metadata:
      labels:
        platform: {{ template "cenit.fullname" . }}-frontend
    spec:  
      containers:
      - name: {{ template "cenit.fullname" . }}-frontend
        image: cenitgroup/cenitio:frontend
        imagePullPolicy: Always
        resources:
          limits:
            memory: "1Gi"
            cpu: "1000m"
        command: ["bundle", "exec", "unicorn", "-c", "config/unicorn.rb"]
        env:
          - name: ENABLE_RERECAPTCHA
            value: "false"
          - name:  MAXIMUM_UNICORN_CONSUMERS
            value: "0"
          - name: BASE_MULTIPLIER_ACTIVE_TASKS
            value: "50"
          - name: SCHEDULER_LOOKUP_INTERVAL
            value: "4"
          - name: UNICORN_WORKERS
            value: "2"
          - name: LOOKUP_SCHEDULER_OFF
            value: "true"
          - name: DELAY_TASKS
            value: "true"
          {{- if and .Values.services.redis.host .Values.services.redis.port .Values.services.redis.db .Values.services.redis.pwd | not }}
          - name: REDIS_HOST
            value: {{ template "cenit.fullname" . }}-redis-svc
          {{- else }}
          - name: REDIS_HOST
            value: {{ .Values.services.redis.host | toString | quote }}
          - name: REDIS_PORT
            value: {{ .Values.services.redis.port | toString | quote }}
          - name: REDIS_DB
            value: {{ .Values.services.redis.db | toString | quote }}
          - name: REDIS_PASSWORD
            value: {{ .Values.services.redis.pwd | toString | quote }}
          {{- end }}
          - name: TENANT_CREATION_DISABLED
            value: "true"
          - name: MONGODB_URI
            value: mongodb://{{ template "cenit.fullname" . }}-mongo-svc/cenit
        ports:
        - containerPort: 8080

