{{- if and .Values.services.redis.host .Values.services.redis.port .Values.services.redis.db .Values.services.redis.pwd | not }}

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ template "cenit.fullname" . }}-redis-pvc
spec:
  accessModes:
    - ReadWriteOnce
  {{- if .Values.services.csiDrive }}
  storageClassName: ebs-sc
  {{- end }}
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cenit.fullname" . }}-redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      store: {{ template "cenit.fullname" . }}-redis
  template:
    metadata:
      labels:
        store: {{ template "cenit.fullname" . }}-redis
    spec:
      volumes:
        - name: {{ template "cenit.fullname" . }}-redis-storage
          persistentVolumeClaim:
            claimName: {{ template "cenit.fullname" . }}-redis-pvc
      containers:
      - name: {{ template "cenit.fullname" . }}-redis
        image: redis
        resources:
          limits:
            memory: "{{ default 1 .Values.services.redis.resources.memory }}Gi"
            cpu: "{{ default 350 .Values.services.redis.resources.cpu }}m"
        command: ["redis-server", "--appendonly", "yes"]
        ports:
        - containerPort: 6379
        volumeMounts:
          - name: {{ template "cenit.fullname" . }}-redis-storage
            mountPath: /data

---

apiVersion: v1
kind: Service
metadata:
  name: {{ template "cenit.fullname" . }}-redis-svc
spec:
  type: ClusterIP
  selector:
    store: {{ template "cenit.fullname" . }}-redis
  ports:
  - name: service-port
    port: 6379
    targetPort: 6379

{{- end }}
